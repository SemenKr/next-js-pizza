// Клиент
generator client {
  provider = "prisma-client-js"
}

// База данных
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Таблицы
model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     UserRole @default(USER)
  verified DateTime

  provider   String? // какая соц сеть привязана
  providerId String?

  cart             Cart?
  order            Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  ingredients Ingredient[]

  category   Category?     @relation(fields: [categoryId], references: [id]) // поле для Js которое не храниттьбся в базе денных а нужго для связи продуктов с категориями
  categoryId Int? // это поле для базы данных
  items      ProductItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model ProductItem {
  id Int @id @default(autoincrement())

  price     Int
  size      Int? // может отсутсвовать, поэтому ? в конце
  pizzaType Int?

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id]) // связь с продуктами
  productId Int
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products Product[]

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  token String? // токен для незарегестрированных и зареганых пользователей

  totalAmount Int @default(0) // общая стоимость по умолчанию 0

  items CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id]) // связь c карзиной
  cartId Int

  ingredients Ingredient[]

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token       String // токен для незарегестрированных и зареганых пользователей
  totalAmount Int // общая стоимость 
  status      OrderStatus
  paymentId   String? // id платежа
  items       Json // список товаров

  fullName String
  email    String
  phone    String
  address  String
  comments String

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
}

model VerificationCode {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
